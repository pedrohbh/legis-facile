/*
 * generated by Xtext 2.23.0
 */
package ufes.mdd.lei.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LegisFacileGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LeiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Lei");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Lei:
		//	elements+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cPreliminarParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cNormativaParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cFinalParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//Type:
		//	DataType | Entity | Preliminar Normativa Final;
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | Entity | Preliminar Normativa Final
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
		
		//Preliminar Normativa Final
		public Group getGroup_2() { return cGroup_2; }
		
		//Preliminar
		public RuleCall getPreliminarParserRuleCall_2_0() { return cPreliminarParserRuleCall_2_0; }
		
		//Normativa
		public RuleCall getNormativaParserRuleCall_2_1() { return cNormativaParserRuleCall_2_1; }
		
		//Final
		public RuleCall getFinalParserRuleCall_2_2() { return cFinalParserRuleCall_2_2; }
	}
	public class PreliminarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Preliminar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPreliminarKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPreliminarKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEpigrageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEpigrageEpigrafeParserRuleCall_2_0 = (RuleCall)cEpigrageAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEmentaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEmentaEmentaParserRuleCall_4_0 = (RuleCall)cEmentaAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPreambuloAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPreambuloPreambuloParserRuleCall_6_0 = (RuleCall)cPreambuloAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Preliminar:
		//	('Preliminar' | 'preliminar') '{'
		//	epigrage=Epigrafe ','
		//	ementa=Ementa ','
		//	preambulo=Preambulo ','
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//('Preliminar' | 'preliminar') '{' epigrage=Epigrafe ',' ementa=Ementa ',' preambulo=Preambulo ',' '}'
		public Group getGroup() { return cGroup; }
		
		//('Preliminar' | 'preliminar')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Preliminar'
		public Keyword getPreliminarKeyword_0_0() { return cPreliminarKeyword_0_0; }
		
		//'preliminar'
		public Keyword getPreliminarKeyword_0_1() { return cPreliminarKeyword_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//epigrage=Epigrafe
		public Assignment getEpigrageAssignment_2() { return cEpigrageAssignment_2; }
		
		//Epigrafe
		public RuleCall getEpigrageEpigrafeParserRuleCall_2_0() { return cEpigrageEpigrafeParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//ementa=Ementa
		public Assignment getEmentaAssignment_4() { return cEmentaAssignment_4; }
		
		//Ementa
		public RuleCall getEmentaEmentaParserRuleCall_4_0() { return cEmentaEmentaParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//preambulo=Preambulo
		public Assignment getPreambuloAssignment_6() { return cPreambuloAssignment_6; }
		
		//Preambulo
		public RuleCall getPreambuloPreambuloParserRuleCall_6_0() { return cPreambuloPreambuloParserRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EpigrafeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Epigrafe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEpigrafeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEpigrafeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAtoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtoSTRINGTerminalRuleCall_2_0 = (RuleCall)cAtoAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNumeroAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumeroINTTerminalRuleCall_4_0 = (RuleCall)cNumeroAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAnoAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnoINTTerminalRuleCall_6_0 = (RuleCall)cAnoAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Epigrafe:
		//	('Epigrafe' | 'epigrafe') '(' ato=STRING ',' numero=INT ',' ano=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//('Epigrafe' | 'epigrafe') '(' ato=STRING ',' numero=INT ',' ano=INT ')'
		public Group getGroup() { return cGroup; }
		
		//('Epigrafe' | 'epigrafe')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Epigrafe'
		public Keyword getEpigrafeKeyword_0_0() { return cEpigrafeKeyword_0_0; }
		
		//'epigrafe'
		public Keyword getEpigrafeKeyword_0_1() { return cEpigrafeKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ato=STRING
		public Assignment getAtoAssignment_2() { return cAtoAssignment_2; }
		
		//STRING
		public RuleCall getAtoSTRINGTerminalRuleCall_2_0() { return cAtoSTRINGTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//numero=INT
		public Assignment getNumeroAssignment_4() { return cNumeroAssignment_4; }
		
		//INT
		public RuleCall getNumeroINTTerminalRuleCall_4_0() { return cNumeroINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//ano=INT
		public Assignment getAnoAssignment_6() { return cAnoAssignment_6; }
		
		//INT
		public RuleCall getAnoINTTerminalRuleCall_6_0() { return cAnoINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class EmentaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Ementa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEmentaKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEmentaKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEmentaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmentaSTRINGTerminalRuleCall_2_0 = (RuleCall)cEmentaAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Ementa:
		//	('Ementa' | 'ementa') '(' ementa=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//('Ementa' | 'ementa') '(' ementa=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//('Ementa' | 'ementa')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Ementa'
		public Keyword getEmentaKeyword_0_0() { return cEmentaKeyword_0_0; }
		
		//'ementa'
		public Keyword getEmentaKeyword_0_1() { return cEmentaKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ementa=STRING
		public Assignment getEmentaAssignment_2() { return cEmentaAssignment_2; }
		
		//STRING
		public RuleCall getEmentaSTRINGTerminalRuleCall_2_0() { return cEmentaSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PreambuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Preambulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPreambuloKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPreambuloKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPreambuloAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPreambuloSTRINGTerminalRuleCall_2_0 = (RuleCall)cPreambuloAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Preambulo:
		//	('Preambulo' | 'preambulo') '(' preambulo=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//('Preambulo' | 'preambulo') '(' preambulo=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//('Preambulo' | 'preambulo')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Preambulo'
		public Keyword getPreambuloKeyword_0_0() { return cPreambuloKeyword_0_0; }
		
		//'preambulo'
		public Keyword getPreambuloKeyword_0_1() { return cPreambuloKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//preambulo=STRING
		public Assignment getPreambuloAssignment_2() { return cPreambuloAssignment_2; }
		
		//STRING
		public RuleCall getPreambuloSTRINGTerminalRuleCall_2_0() { return cPreambuloSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class NormativaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Normativa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNormativaKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNormativaKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Normativa:
		//	('Normativa' | 'normativa') '{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//('Normativa' | 'normativa') '{' '}'
		public Group getGroup() { return cGroup; }
		
		//('Normativa' | 'normativa')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Normativa'
		public Keyword getNormativaKeyword_0_0() { return cNormativaKeyword_0_0; }
		
		//'normativa'
		public Keyword getNormativaKeyword_0_1() { return cNormativaKeyword_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class FinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Final");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFinalKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cFinalKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Final:
		//	('Final' | 'final') '{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//('Final' | 'final') '{' '}'
		public Group getGroup() { return cGroup; }
		
		//('Final' | 'final')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Final'
		public Keyword getFinalKeyword_0_0() { return cFinalKeyword_0_0; }
		
		//'final'
		public Keyword getFinalKeyword_0_1() { return cFinalKeyword_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataType:
		//	'datatype' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//	'entity' name=ID ('extends' superType=[Entity])? '{'
		//	features+=Feature*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID ('extends' superType=[Entity])? '{' features+=Feature* '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Entity]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Entity]
		public CrossReference getSuperTypeEntityCrossReference_2_1_0() { return cSuperTypeEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeEntityIDTerminalRuleCall_2_1_0_1() { return cSuperTypeEntityIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_0() { return cFeaturesFeatureParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ufes.mdd.lei.LegisFacile.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cManyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cManyManyKeyword_0_0 = (Keyword)cManyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeTypeCrossReference_3_0.eContents().get(1);
		
		//Feature:
		//	many?='many'? name=ID ':' type=[Type];
		@Override public ParserRule getRule() { return rule; }
		
		//many?='many'? name=ID ':' type=[Type]
		public Group getGroup() { return cGroup; }
		
		//many?='many'?
		public Assignment getManyAssignment_0() { return cManyAssignment_0; }
		
		//'many'
		public Keyword getManyManyKeyword_0_0() { return cManyManyKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[Type]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_3_0() { return cTypeTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_3_0_1() { return cTypeTypeIDTerminalRuleCall_3_0_1; }
	}
	
	
	private final LeiElements pLei;
	private final TypeElements pType;
	private final PreliminarElements pPreliminar;
	private final EpigrafeElements pEpigrafe;
	private final EmentaElements pEmenta;
	private final PreambuloElements pPreambulo;
	private final NormativaElements pNormativa;
	private final FinalElements pFinal;
	private final DataTypeElements pDataType;
	private final EntityElements pEntity;
	private final FeatureElements pFeature;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LegisFacileGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLei = new LeiElements();
		this.pType = new TypeElements();
		this.pPreliminar = new PreliminarElements();
		this.pEpigrafe = new EpigrafeElements();
		this.pEmenta = new EmentaElements();
		this.pPreambulo = new PreambuloElements();
		this.pNormativa = new NormativaElements();
		this.pFinal = new FinalElements();
		this.pDataType = new DataTypeElements();
		this.pEntity = new EntityElements();
		this.pFeature = new FeatureElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ufes.mdd.lei.LegisFacile".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Lei:
	//	elements+=Type*;
	public LeiElements getLeiAccess() {
		return pLei;
	}
	
	public ParserRule getLeiRule() {
		return getLeiAccess().getRule();
	}
	
	//Type:
	//	DataType | Entity | Preliminar Normativa Final;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Preliminar:
	//	('Preliminar' | 'preliminar') '{'
	//	epigrage=Epigrafe ','
	//	ementa=Ementa ','
	//	preambulo=Preambulo ','
	//	'}';
	public PreliminarElements getPreliminarAccess() {
		return pPreliminar;
	}
	
	public ParserRule getPreliminarRule() {
		return getPreliminarAccess().getRule();
	}
	
	//Epigrafe:
	//	('Epigrafe' | 'epigrafe') '(' ato=STRING ',' numero=INT ',' ano=INT ')';
	public EpigrafeElements getEpigrafeAccess() {
		return pEpigrafe;
	}
	
	public ParserRule getEpigrafeRule() {
		return getEpigrafeAccess().getRule();
	}
	
	//Ementa:
	//	('Ementa' | 'ementa') '(' ementa=STRING ')';
	public EmentaElements getEmentaAccess() {
		return pEmenta;
	}
	
	public ParserRule getEmentaRule() {
		return getEmentaAccess().getRule();
	}
	
	//Preambulo:
	//	('Preambulo' | 'preambulo') '(' preambulo=STRING ')';
	public PreambuloElements getPreambuloAccess() {
		return pPreambulo;
	}
	
	public ParserRule getPreambuloRule() {
		return getPreambuloAccess().getRule();
	}
	
	//Normativa:
	//	('Normativa' | 'normativa') '{'
	//	'}';
	public NormativaElements getNormativaAccess() {
		return pNormativa;
	}
	
	public ParserRule getNormativaRule() {
		return getNormativaAccess().getRule();
	}
	
	//Final:
	//	('Final' | 'final') '{'
	//	'}';
	public FinalElements getFinalAccess() {
		return pFinal;
	}
	
	public ParserRule getFinalRule() {
		return getFinalAccess().getRule();
	}
	
	//DataType:
	//	'datatype' name=ID;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID ('extends' superType=[Entity])? '{'
	//	features+=Feature*
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Feature:
	//	many?='many'? name=ID ':' type=[Type];
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
