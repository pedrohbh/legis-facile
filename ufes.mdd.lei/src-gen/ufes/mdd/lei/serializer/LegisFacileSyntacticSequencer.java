/*
 * generated by Xtext 2.23.0
 */
package ufes.mdd.lei.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import ufes.mdd.lei.services.LegisFacileGrammarAccess;

@SuppressWarnings("all")
public class LegisFacileSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LegisFacileGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Ementa_EmentaKeyword_0_0_or_EmentaKeyword_0_1;
	protected AbstractElementAlias match_Epigrafe_EpigrafeKeyword_0_0_or_EpigrafeKeyword_0_1;
	protected AbstractElementAlias match_Preambulo_PreambuloKeyword_0_0_or_PreambuloKeyword_0_1;
	protected AbstractElementAlias match_Preliminar_PreliminarKeyword_0_0_or_PreliminarKeyword_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LegisFacileGrammarAccess) access;
		match_Ementa_EmentaKeyword_0_0_or_EmentaKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEmentaAccess().getEmentaKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getEmentaAccess().getEmentaKeyword_0_1()));
		match_Epigrafe_EpigrafeKeyword_0_0_or_EpigrafeKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEpigrafeAccess().getEpigrafeKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getEpigrafeAccess().getEpigrafeKeyword_0_1()));
		match_Preambulo_PreambuloKeyword_0_0_or_PreambuloKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPreambuloAccess().getPreambuloKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getPreambuloAccess().getPreambuloKeyword_0_1()));
		match_Preliminar_PreliminarKeyword_0_0_or_PreliminarKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPreliminarAccess().getPreliminarKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getPreliminarAccess().getPreliminarKeyword_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getFinalRule())
			return getFinalToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNormativaRule())
			return getNormativaToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Final: 
	 * 	('Final'|'final') '{'
	 * 	'}'
	 * ;
	 */
	protected String getFinalToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Final { }";
	}
	
	/**
	 * Normativa:
	 * 	('Normativa'|'normativa') '{'
	 * 	'}'
	 * ;
	 */
	protected String getNormativaToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Normativa { }";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Ementa_EmentaKeyword_0_0_or_EmentaKeyword_0_1.equals(syntax))
				emit_Ementa_EmentaKeyword_0_0_or_EmentaKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Epigrafe_EpigrafeKeyword_0_0_or_EpigrafeKeyword_0_1.equals(syntax))
				emit_Epigrafe_EpigrafeKeyword_0_0_or_EpigrafeKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Preambulo_PreambuloKeyword_0_0_or_PreambuloKeyword_0_1.equals(syntax))
				emit_Preambulo_PreambuloKeyword_0_0_or_PreambuloKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Preliminar_PreliminarKeyword_0_0_or_PreliminarKeyword_0_1.equals(syntax))
				emit_Preliminar_PreliminarKeyword_0_0_or_PreliminarKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'Ementa' | 'ementa'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' ementa=STRING
	 */
	protected void emit_Ementa_EmentaKeyword_0_0_or_EmentaKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Epigrafe' | 'epigrafe'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' ato=STRING
	 */
	protected void emit_Epigrafe_EpigrafeKeyword_0_0_or_EpigrafeKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Preambulo' | 'preambulo'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' preambulo=STRING
	 */
	protected void emit_Preambulo_PreambuloKeyword_0_0_or_PreambuloKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Preliminar' | 'preliminar'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '{' epigrage=Epigrafe
	 */
	protected void emit_Preliminar_PreliminarKeyword_0_0_or_PreliminarKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
